// Copyright 2014 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package gitkit

import (
	"net/http"
	"sync"

	"golang.org/x/net/context"
	"golang.org/x/oauth2"
	"golang.org/x/oauth2/jwt"
)

type Authenticator interface {
	// AccessToken fetches an OAuth2 token for accessing authentication required
	// identitytoolkit APIs.
	AccessToken(r http.RoundTripper) (string, error)
	SetContext(context.Context)
}

// PEMKeyAuthenticator uses a PEM private key to authenticate.
type PEMKeyAuthenticator struct {
	// assertion is the JWT assertion generated by the service account.
	assertion *jwt.Config
	// token is the identitytookit API OAuth2 token.
	token *oauth2.Token
	mu    sync.Mutex
	ctx   context.Context
}

// SetContext implements Authenticator interface.
func (a *PEMKeyAuthenticator) SetContext(ctx context.Context) {
	a.ctx = ctx
}

// AccessToken implements Authenticator interface.
func (a *PEMKeyAuthenticator) AccessToken(r http.RoundTripper) (string, error) {
	a.mu.Lock()
	defer a.mu.Unlock()

	if a.token == nil || !a.token.Valid() {
		if a.ctx == nil {
			a.ctx = oauth2.NoContext
		}
		token, err := a.assertion.TokenSource(a.ctx).Token()
		if err != nil {
			return "", err
		}
		a.token = token
	}
	return a.token.AccessToken, nil
}

const clientUserAgent = "gitkit-go-client/0.1.1"

// ServiceAccountTransport is an implementation of http.RoundTripper that can
// automatically fetch an access token for the service account to access
// authentication required identitytoolkit APIs.
type ServiceAccountTransport struct {
	Auth      Authenticator
	Transport http.RoundTripper // Underlying HTTP transport.
}

// RoundTrip implements the http.RoundTripper interface.
func (t *ServiceAccountTransport) RoundTrip(req *http.Request) (*http.Response, error) {
	token, err := t.Auth.AccessToken(t.Transport)
	if err != nil {
		return nil, err
	}
	// Copy the request to avoid modifying the original request.
	// This is required by the specification of http.RoundTripper.
	newReq := *req
	newReq.Header = make(http.Header)
	for k, v := range req.Header {
		newReq.Header[k] = v
	}
	// Add Authorization header.
	newReq.Header.Set("Authorization", "Bearer "+token)
	newReq.Header.Set("Content-Type", "application/json")
	newReq.Header.Set("User-Agent", clientUserAgent)
	return t.Transport.RoundTrip(&newReq)
}
